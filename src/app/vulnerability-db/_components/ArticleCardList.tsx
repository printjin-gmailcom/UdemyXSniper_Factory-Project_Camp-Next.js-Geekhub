'use client';

import SuggestionChip from '@/components/Chips/SuggestionChip';
import ArticleCard from '@/components/VulDbCard/ArticleCard';
import { ArticleData } from '@/types/crawlingData';
import Link from 'next/link';
import { useEffect, useState } from 'react';

const companyList: string[] = ['마이크로소프트', '오라클', 'GitLab', '아파치', '리눅스'];

type CompanyConfig = {
  마이크로소프트: string;
  오라클: string;
  GitLab: string;
  아파치: string;
  리눅스: string;
};

const companyConfig: CompanyConfig = {
  마이크로소프트: 'microsoft',
  오라클: 'Oracle',
  GitLab: 'GitLab',
  아파치: 'Apache',
  리눅스: 'Linux',
};

export default function ArticleCardList({ dataList }: { dataList: ArticleData[] }) {
  const [toggleLabel, setToggleLabel] = useState(true);
  const [scrappedArticleIds, setScrappedArticleIds] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchScraps() {
      try {
        const response = await fetch('/api/scrap/list');
        const data = await response.json();
        setScrappedArticleIds(data.scraps);
      } catch (error) {
        console.error('스크랩 데이터를 가져오는 중 오류 발생:', error);
      } finally {
        setLoading(false); // 로딩 상태를 종료
      }
    }
    fetchScraps();
  }, []);

  const checkCompany = (title: string): string => {
    let companyName = 'other';
    companyList.forEach(company => {
      if (title.indexOf(company) === -1) {
        return false;
      } else {
        companyName = companyConfig[company as keyof CompanyConfig];
        return true;
      }
    });
    return companyName;
  };

  const onClickLabel = () => {
    setToggleLabel(prev => !prev);
  };

  // 로딩 중일 때 로딩 메시지 혹은 스켈레톤 UI 보여주기
  if (loading) {
    return <div>로딩 중...</div>;
  }

  return (
    <div className="flex flex-col gap-[1.6rem]">
      <h2 className="text-[2.4rem] font-bold leading-[2.905rem]">취약점 DB</h2>
      <div className="flex gap-[1.2rem]">
        <Link href="/vulnerability-db?label=hot&page=1" scroll={false}>
          <button type="button" onClick={onClickLabel}>
            <SuggestionChip variant="hot" isActive={toggleLabel} />
          </button>
        </Link>
        <Link href="/vulnerability-db?label=new&page=1" scroll={false}>
          <button type="button" onClick={onClickLabel}>
            <SuggestionChip variant="new" isActive={!toggleLabel} />
          </button>
        </Link>
      </div>
      <div className="flex flex-col gap-[1.6rem]">
        {dataList.map(data => {
          const isScrapped = scrappedArticleIds.includes(data.id);
          return (
            <Link key={data.id} href={`/vulnerability-db/${data.id}`}>
              <ArticleCard
                company={checkCompany(data.title)}
                date={data.scrapDate}
                label=""
                id={data.id}
                title={data.title}
                content={typeof data.content[0] === 'string' ? data.content[0] : 'table 데이터....'}
                isScrapped={isScrapped}
              />
            </Link>
          );
        })}
      </div>
    </div>
  );
}
