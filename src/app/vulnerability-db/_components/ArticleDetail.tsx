import SuggestionChip from '@/components/Chips/SuggestionChip';
import ArticleSmallCard from '@/components/VulDbCard/ArticleSmallCard';
import { BigPinIcon, ShareIcon } from '@/public/index';
import { ArticleData, TableObject } from '@/types/crawlingData';
import { format } from 'date-fns';
import Link from 'next/link';
import { twMerge } from 'tailwind-merge';

const dummyData = [
  {
    id: '1',
    label: 'hot',
    title: '[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서',
    company: 'Microsoft',
    content:
      '최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점을 발견한 것으로 알려졌다.',
    date: new Date(2024, 7, 21, 17, 16, 0),
  },
  {
    id: '2',
    label: 'new',
    title: '[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서',
    company: 'Microsoft',
    content:
      '최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점을 발견한 것으로 알려졌다.',
    date: new Date(2024, 7, 10, 17, 16, 0),
  },
  {
    id: '3',
    label: 'hot',
    title: '[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서',
    company: 'Microsoft',
    content:
      '최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점을 발견한 것으로 알려졌다.',
    date: new Date(2024, 5, 21, 17, 16, 0),
  },
  {
    id: '4',
    label: 'new',
    title: '[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서',
    company: 'Microsoft',
    content:
      '최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점을 발견한 것으로 알려졌다.',
    date: new Date(2024, 6, 21, 17, 16, 0),
  },
  {
    id: '5',
    label: 'hot',
    title: '[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서',
    company: 'Microsoft',
    content:
      '최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점을 발견한 것으로 알려졌다.',
    date: new Date(2024, 3, 21, 17, 16, 0),
  },
  {
    id: '6',
    label: 'new',
    title: '[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서',
    company: 'Microsoft2',
    content:
      '최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점을 발견한 것으로 알려졌다.',
    date: new Date(2024, 7, 21, 17, 16, 0),
  },
];

export default function ArticleDetail({
  title,
  keyword,
  scrapDate,
  content,
  labelList,
}: ArticleData) {
  const replaceToBr = (line: string) => {
    return line.replace(/\n/g, '<br/>');
  };
  const gridColsByTable = (tableItem: TableObject) => {
    const count = Object.keys(tableItem).length;
    switch (count) {
      case 2:
        return 'grid-cols-2';
      case 3:
        return 'grid-cols-3';
      case 4:
        return 'grid-cols-4';
      case 5:
        return 'grid-cols-5';
      case 6:
        return 'grid-cols-6';
      case 7:
        return 'grid-cols-7';
      default:
        return 'grid-cols-6';
    }
  };
  const tableKeys = ['column1', 'column2', 'column3', 'column4', 'column5', 'column6', 'column7'];
  const column1Style = 'rounded-full border-[0.1rem] px-[1.2rem] py-[0.8rem]';
  const otherColumnStyle = 'h-fit w-fit max-w-[15.3rem] overflow-x-scroll';
  return (
    <div className="flex w-[131.4rem] flex-col gap-[6rem]">
      <section className="flex flex-col border-b-[0.1rem] border-[#c3c3c3] pb-[6rem]">
        <div className="mb-[0.8rem] mt-[2.8rem] flex gap-[1rem]">
          {labelList.map(label => (
            <SuggestionChip key={label} variant={label} />
          ))}
        </div>
        <h2 className="mt-[1.947rem] text-[3.6rem] font-regular leading-[4.357rem]">
          {`[${keyword.trim()}] ${title}`}
        </h2>
        <div className="mt-[3.2rem] flex justify-between">
          <div className="flex gap-[3.6rem] text-[2rem] leading-[2.4rem] text-gray-default">
            <span>취약성 뉴스 세부정보</span>
            <span>{`출시시간 | ${format(scrapDate, 'yyyy.MM.dd hh:mm:ss')}`}</span>
          </div>
          <div className="flex gap-[2.4rem]">
            <button type="button">
              <BigPinIcon className="h-[3.2rem] w-[3.2rem]" />
            </button>
            <button type="button">
              <ShareIcon />
            </button>
          </div>
        </div>
      </section>
      <section className="w-[131.4rem] border-b-[0.1rem] border-[#c3c3c3] px-[1.5rem] pb-[6rem]">
        <div className="flex flex-col text-[2.4rem] leading-[3.6rem] text-gray-black">
          {content.map((line, index) =>
            typeof line === 'string' ? (
              <div key={line} dangerouslySetInnerHTML={{ __html: replaceToBr(line) }} />
            ) : (
              <div
                key={line.table && line.table[0].column1}
                className="mb-[6rem] mt-[6rem] border-t-[0.1rem] border-[#c3c3c3]"
              >
                <div className="mt-[6rem] flex w-full flex-col gap-[5.4rem] rounded-[2rem] border-[0.1rem] border-[#c3c3c3] px-[4rem] py-[6rem]">
                  {line.table?.map((tableItem, tableIndex) => (
                    <div
                      key={tableItem.column1}
                      className={twMerge(
                        `grid items-center justify-items-center gap-[7.3rem] text-[1.7rem] leading-[2.6rem]`,
                        gridColsByTable(tableItem),
                        tableIndex === 0
                          ? 'text-[1.7rem] leading-[2.6rem]'
                          : 'text-[1.5rem] leading-[2.3rem]',
                      )}
                    >
                      {tableKeys.map(
                        tableKey =>
                          tableItem[tableKey as keyof TableObject] && (
                            <span
                              key={tableKey}
                              className={twMerge(index === 0 ? column1Style : otherColumnStyle)}
                            >
                              {tableItem[tableKey as keyof TableObject]}
                            </span>
                          ),
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ),
          )}
        </div>
      </section>
      <section className="mb-[13.8rem]">
        <h3 className="text-[2.4rem] font-bold leading-[2.9rem]">비슷한 정보글</h3>
        <div className="mt-[1.6rem] grid grid-cols-3 justify-items-center gap-[3.6rem]">
          {dummyData.map(data => (
            <Link key={data.id} href={`/vulnerability-db/${data.id}`}>
              <ArticleSmallCard
                company={data.company}
                content={data.content}
                labelList={['hot']}
                title={data.title}
                date={data.date}
                id={data.id}
                keyword="microsoft"
              />
            </Link>
          ))}
        </div>
      </section>
    </div>
  );
}
